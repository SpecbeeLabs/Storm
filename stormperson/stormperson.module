<?php
// $Id

function stormperson_help($path, $arg) {
  $o = '';

  switch ($section) {
    case "admin/help#stormperson":
      $o = '<p>'. t("Provides person support for STORM") .'</p>';
      break;
  }

  return $o;
}

function stormperson_perm() {
  return array(
    'STORM person: access',
    'STORM person: add',
    'STORM person: delete all',
    'STORM person: delete own',
    'STORM person: delete of user organization',
    'STORM person: edit all',
    'STORM person: edit own',
    'STORM person: edit of user organization',
    'STORM person: view all',
    'STORM person: view own',
    'STORM person: view of user organization',
  );
}

function stormperson_access($op, $node, $account) {
  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'create') {
    return user_access('STORM person: add');
  }

  if ($op == 'delete') {
    if (user_access('STORM person: delete all')) {
      return TRUE;
    }
    else if (user_access('STORM person: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM person: delete of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('STORM person: edit all')) {
      return TRUE;
    }
    else if (user_access('STORM person: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM person: edit of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('STORM person: view all')) {
      return TRUE;
    }
    else if (user_access('STORM person: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM person: view of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function stormperson_access_sql($sql, $where = array(), $join = array()) {
  if (user_access('STORM person: view all')) {
    return storm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('STORM person: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('STORM person: view of user organization')) {
    if ($cond) $cond .= ' OR ';
    $cond .= 'spe.organization_nid='. $user->stormorganization_nid;
  }
  if (!$cond) {
    $cond = '0=1';
  }
  $where[] = $cond;

  return storm_rewrite_sql($sql, $where);
}

function stormperson_menu() {
  $items['node/%node/people'] = array(
    'title' => t('People'),
    'page callback' => 'stormperson_people',
    'page arguments' => array(1),
    'access callback' => '_stormperson_people_access',
    'access arguments' => array(1),
    'file' => 'stormperson.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );
  $items['storm/people'] = array(
    'title' => t('People'),
    'description' => t('STORM people'),
    'page callback' => 'stormperson_list',
    'access arguments' => array('STORM person: access'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'stormperson.admin.inc',
  );
  return $items;
}

function stormperson_theme() {
  return array(
    'stormperson_list' => array(
      'file'      => 'stormperson.theme.inc',
      'arguments' => array('header', 'people'),
    ),
    'stormperson_people' => array(
      'file'      => 'stormperson.theme.inc',
      'arguments' => array('header', 'people'),
    ),
  );
}

function stormperson_node_info() {
  return array(
    'stormperson' => array(
      'name' => t('Person'),
      'module' => 'stormperson',
      'description' => t("A person for STORM."),
      'title_label' => t("Name"),
      'body_label' => t("Description"),
    )
  );
}

function stormperson_storm_indexpage() {
  $o = array();
  $o['stormperson']['title'] =  l(t('People'), 'storm/people');
  return $o;
}

function stormperson_stormorganization_change($organization_nid, $organization_title) {
  $s = "UPDATE {stormperson} SET organization_title='%s' WHERE organization_nid=%d AND organization_title <> '%s'";
  db_query($s, $organization_title, $organization_nid, $organization_title);
}

function stormperson_form(&$node) {
  if (array_key_exists('organization_nid', $_GET)) $node->organization_nid = $_GET['organization_nid'];

  $type = node_get_types('type', $node);

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -51,
  );

  $form['group1']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#size' => 40,
    '#weight' => -51,
  );

  $s = "SELECT n.nid, n.title FROM {stormorganization} sor INNER JOIN {node} n ON sor.nid=n.nid WHERE n.status=1 AND n.type='stormorganization' ORDER BY n.title";
  $r = db_query(stormorganization_access_sql($s));
  $organizations = array();
  while ($organization = db_fetch_object($r)) {
    $organizations[$organization->nid] = $organization->title;
    if (!$node->organization_nid) $node->organization_nid = $organization->nid;
  }
  $form['group1']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => t('Organization'),
    '#default_value' => $node->organization_nid,
    '#options' => $organizations,
    '#required' => true,
    '#attributes' => array('onchange' => "stormperson_organization_project_tasks(this, 'edit-project-nid', 'edit-parent-nid', true, '-')"),
    '#weight' => -50,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -49,
  );

  $form['group2']['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#size' => 20,
    '#default_value' => $node->prefix,
  );

  $form['group2']['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Fullname'),
    '#size' => 40,
    '#default_value' => $node->fullname,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -48,
  );

  $form['group3']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 30,
    '#default_value' => $node->email,
  );

  $form['group3']['www'] = array(
    '#type' => 'textfield',
    '#title' => t('WWW'),
    '#size' => 30,
    '#default_value' => $node->www,
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -47,
  );

  $form['group4']['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#size' => 30,
    '#default_value' => $node->phone,
  );

  $form['group4']['im'] = array(
    '#type' => 'textfield',
    '#title' => t('IM'),
    '#size' => 30,
    '#default_value' => $node->im,
  );

  $form['body_filter']['#weight'] = -17;
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['body_filter']['format'] = filter_form($node->format);

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->title_old,
  );

  return $form;
}

function stormperson_insert($node) {
  _stormperson_beforesave($node);

  db_query("INSERT INTO {stormperson}
          (vid, nid, organization_nid, organization_title,
          prefix, fullname,
          email, www,
          phone, im
          )
          VALUES
          (%d, %d, %d, '%s',
          '%s', '%s',
          '%s', '%s',
          '%s', '%s'
          )",
          $node->vid, $node->nid, $node->organization_nid, $node->organization_title,
          $node->prefix, $node->fullname,
          $node->email, $node->www,
          $node->phone, $node->im);
}

function stormperson_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    stormperson_insert($node);
  }
  else {
    _stormperson_beforesave($node);

    db_query("UPDATE {stormperson} SET
      organization_nid=%d, organization_title='%s',
      prefix='%s', fullname='%s',
      email='%s', www='%s',
      phone='%s', im='%s'
      WHERE vid = %d",
      $node->organization_nid, $node->organization_title,
      $node->prefix, $node->fullname,
      $node->email, $node->www,
      $node->phone, $node->im,
      $node->vid);
    if (($node->title != $node->title_old) || ($node->stepno != $node->stepno_old)) {
      module_invoke_all('stormperson_change', $node->nid, $node->stepno, $node->title);
    }
  }
}

function _stormperson_beforesave(&$node) {
  $s = "SELECT n.title
      FROM {node} n INNER JOIN {stormorganization} p ON n.nid=p.nid
      WHERE type='stormorganization' AND n.nid=%d";
  $r = db_query($s, $node->organization_nid);
  $o = db_fetch_object($r);
  $node->organization_title = $o->title;
}

function stormperson_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {stormperson} WHERE nid = %d', $node->nid);
}

function stormperson_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {stormperson} WHERE vid = %d', $node->vid));
  $additions->stepno_old = $node->stepno;
  $additions->title_old = $node->title;
  return $additions;
}

function _stormperson_people_access($node=NULL) {
  if ($node == NULL) return FALSE;
  if ($node->type == 'stormorganization' && user_access('STORM person: create')) return TRUE;
  return FALSE;
}

