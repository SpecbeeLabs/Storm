<?php
// $Id$

/**
 * @file
 */

function stormorganization_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#stormorganization":
      $output = '<p>'. t("Provides organization support for STORM") .'</p>';
      break;
  }

  return $output;
}

function stormorganization_init() {
  global $user;
  if (!$user->stormorganization_nid) {
    $r = db_query("SELECT organization_nid FROM {stormorganization_user} WHERE uid=%d", $user->uid);
    if ($r) {
      $a = db_fetch_object($r);
      $user->stormorganization_nid = $a->organization_nid;
    }
  }
}

function stormorganization_perm() {
  return array(
                'STORM organization: access',
                'STORM organization: add',
                'STORM organization: delete all',
                'STORM organization: delete own',
                'STORM organization: edit all',
                'STORM organization: edit own',
                'STORM organization: edit belonged',
                'STORM organization: view all',
                'STORM organization: view own',
                'STORM organization: view belonged',
                'STORM organization: associate user'
              );}

function stormorganization_access($op, $node, $account) {
  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'create') {
    return user_access('STORM organization: add');
  }

  if ($op == 'delete') {
    if (user_access('STORM organization: delete all')) {
      return TRUE;
    }
    else if (user_access('STORM organization: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('STORM organization: edit all')) {
      return TRUE;
    }
    else if (user_access('STORM organization: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM organization: edit belonged') && ($account->stormorganization_nid == $node->nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('STORM organization: view all')) {
      return TRUE;
    }
    else if (user_access('STORM organization: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM organization: view belonged') && ($account->stormorganization_nid == $node->nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function stormorganization_access_sql($sql, $where = array(), $join = array()) {
  global $user;

  if (user_access('STORM organization: view all')) {
    return storm_rewrite_sql($sql, $where);
  }

  $cond = '';
  if (user_access('STORM organization: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('STORM organization: view belonged')) {
    if ($cond) $cond .= ' OR ';
    $cond .= 'n.nid='. $user->stormorganization_nid;
  }
  if (!$cond) {
    $cond = '0=1';
  }

  if ($cond) $where[] = $cond;

  return storm_rewrite_sql($sql, $where);
}

function stormorganization_menu() {
  $items = array();
  $items['storm/organizations'] = array(
    'title' => t('Organizations'),
    'description' => t('STORM Organizations'),
    'page callback' => 'stormorganization_list',
    'access arguments' => array('STORM organization: access'),
    'file' => 'stormorganization.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function stormorganization_theme() {
  return array(
    'stormorganization_list' => array(
      'file'      => 'stormorganization.theme.inc',
      'arguments' => array('header', 'organizations'),
    ),
  );
}

function stormorganization_node_info() {
  return array(
    'stormorganization' => array(
      'name' => t('Organization'),
      'module' => 'stormorganization',
      'description' => t("An organization for STORM."),
      'title_label' => t("Name"),
      'body_label' => t("Note"),
    )
  );
}

function stormorganization_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -50,
  );

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -49,
  );

  $form['group1']['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#size' => 20,
    '#default_value' => $node->prefix,
  );

  $form['group1']['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Fullname'),
    '#size' => 40,
    '#default_value' => $node->fullname,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -48,
  );

  $form['group2']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip'),
    '#size' => 15,
    '#default_value' => $node->zip,
  );

  $form['group2']['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => $node->address,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -47,
  );

  $form['group3']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => stormattribute_attributes_bydomain('Country'),
    '#default_value' => $node->country,
  );

  $form['group3']['provstate'] = array(
    '#type' => 'textfield',
    '#title' => t('Province / State'),
    '#size' => 20,
    '#default_value' => $node->provstate,
  );

  $form['group3']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 20,
    '#default_value' => $node->city,
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -46,
  );

  $form['group4']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => stormattribute_attributes_bydomain('Currency'),
    '#default_value' => $node->currency,
  );

  $form['group4']['vatid'] = array(
    '#type' => 'textfield',
    '#title' => t('VAT id'),
    '#size' => 20,
    '#default_value' => $node->vatid,
  );

  $form['group5'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -45,
  );

  $form['group5']['www'] = array(
    '#type' => 'textfield',
    '#title' => t('WWW'),
    '#size' => 30,
    '#default_value' => $node->www,
  );

  $form['group5']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 30,
    '#default_value' => $node->email,
  );

  $form['body_filter']['#weight'] = -44;
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['body_filter']['format'] = filter_form($node->format);

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->title_old,
  );

  return $form;
}

function stormorganization_insert($node) {
  db_query("INSERT INTO {stormorganization}
           (vid, nid, prefix, fullname, country, www, email, currency,
           provstate, zip, city, address, vatid
           ) VALUES
           (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s',
           '%s', '%s', '%s', '%s', '%s'
           )",
            $node->vid, $node->nid, $node->prefix, $node->fullname, $node->country, $node->www, $node->email, $node->currency,
            $node->provstate, $node->zip, $node->city, $node->address, $node->vatid
            );
}

function stormorganization_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    stormorganization_insert($node);
  }
  else {
    db_query("UPDATE {stormorganization} SET
              prefix = '%s', fullname = '%s', country='%s', www='%s', email='%s', currency = '%s',
              provstate = '%s', zip = '%s', city = '%s', address = '%s', vatid = '%s'
              WHERE vid = %d",
              $node->prefix, $node->fullname, $node->country, $node->www, $node->email, $node->currency,
              $node->provstate, $node->zip, $node->city, $node->address, $node->vatid,
              $node->vid);
    if ($node->title != $node->title_old) {
      module_invoke_all('stormorganization_change', $node->nid, $node->title);
    }
  }
}

function stormorganization_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {stormorganization} WHERE nid = %d', $node->nid);
}

function stormorganization_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {stormorganization} WHERE vid = %d', $node->vid));
  $additions->title_old = $node->title;
  return $additions;
}

function stormorganization_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['country'] = array(
    '#value' => t('Country') .' : '. $node->country .'<br />',
    '#weight' => 0,
  );
  $node->content['www'] = array(
    '#value' => l($node->www, 'http://'. $node->www, array('absolute' => TRUE)) .'<br />',
    '#weight' => 1,
  );

  if (module_exists('stormperson')) {
    $node->content['people'] = array(
      '#value' => l(t('People'), 'storm/people/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 2,
    );
  }

  if (module_exists('stormproject')) {
    $node->content['projects'] = array(
      '#value' => l(t('Projects'), 'storm/projects/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 3,
    );
  }

  if (module_exists('stormnote')) {
    $node->content['notes'] = array(
      '#value' => l(t('Notes'), 'storm/notes/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 4,
    );
  }

  if (module_exists('stormticket')) {
    $node->content['tickets'] = array(
      '#value' => l(t('Tickets'), 'storm/tickets/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 5,
    );
  }

  if (module_exists('stormtimetracking')) {
    $node->content['timetrackings'] = array(
      '#value' => l(t('Timetrackings'), 'storm/timetrackings/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 6,
    );
  }

  return $node;
}

function stormorganization_user($type, &$edit, &$account, $category = NULL) {
  switch ($type) {
    case 'load':
      return stormorganization_user_load($account);
    case 'register':
      return stormorganization_user_form($edit, $account, $category);
    case 'update':
      return stormorganization_user_save($edit, $account, $category);
    case 'insert':
      return stormorganization_user_save($edit, $account, $category);
    case 'form':
      return stormorganization_user_form($edit, $account, $category);
    case 'delete':
      db_query("DELETE FROM {stormorganization_user} WHERE uid=%d", $account->uid);
  }
}

function stormorganization_user_form(&$edit, &$account, $category = NULL) {
  if (user_access('STORM organization: associate user')) {
    $s = "SELECT n.nid, n.title FROM {node} n WHERE n.status=1 AND n.type='stormorganization' ORDER BY n.title";
    $r = db_query(stormorganization_access_sql($s), $account->uid);
    $os = array();
    while ($o = db_fetch_object($r)) {
      $os[$o->nid] = $o->title;
    }

    $form['stormorganization_nid'] = array(
      '#type' => 'select',
      '#weight' => 20,
      '#title' => t('Organization'),
      '#default_value' => $account->stormorganization_nid,
      '#options' => array(-1 => t('None')) + $os,
    );
  }

  return $form;
}

function stormorganization_user_save(&$edit, &$account, $category = NULL) {
  if (array_key_exists('stormorganization_nid', $edit) && $edit['stormorganization_nid']>0) {
    db_query("DELETE FROM {stormorganization_user} WHERE uid=%d", $account->uid);
    db_query("INSERT INTO {stormorganization_user} (uid, organization_nid) VALUES(%d, %d)", $account->uid, $edit['stormorganization_nid']);
    $account->stormorganization_nid = $edit['organization_nid'];
    $edit['stormorganization_nid']=NULL;
    $r = db_query("SELECT organization_nid FROM {stormorganization_user} WHERE uid=%d", $account->uid);
    if ($r) {
      $a = db_fetch_object($r);
      $account->stormorganization_nid = $a->organization_nid;
    }
    else {
      unset($account->stormorganization_nid);
    }
    global $user;
    if ($user->uid == $account->uid) {
      $user->stormorganization_nid = $account->stormorganization_nid;
    }
  }
}

function stormorganization_user_load(&$account) {
  $r = db_query("SELECT organization_nid FROM {stormorganization_user} WHERE uid=%d", $account->uid);
  if ($r) {
    $a = db_fetch_object($r);
    $account->stormorganization_nid = $a->organization_nid;
  }
}

