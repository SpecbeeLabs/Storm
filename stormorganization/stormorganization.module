<?php
// $Id$

/**
 * @file
 */

function stormorganization_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#stormorganization":
      $output = '<p>'. t("Provides organization support for Storm") .'</p>';
      break;
  }

  return $output;
}

function stormorganization_perm() {
  return array(
                'Storm organization: access',
                'Storm organization: add',
                'Storm organization: delete all',
                'Storm organization: delete own',
                'Storm organization: edit all',
                'Storm organization: edit own',
                'Storm organization: edit belonged',
                'Storm organization: view all',
                'Storm organization: view own',
                'Storm organization: view belonged',
                'Storm organization: associate user'
              );
}

function stormorganization_access($op, $node, $account) {
  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'create') {
    return user_access('Storm organization: add');
  }

  if ($op == 'delete') {
    if (user_access('Storm organization: delete all')) {
      return TRUE;
    }
    else if (user_access('Storm organization: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('Storm organization: edit all')) {
      return TRUE;
    }
    else if (user_access('Storm organization: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm organization: edit belonged') && ($account->stormorganization_nid == $node->nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('Storm organization: view all')) {
      return TRUE;
    }
    else if (user_access('Storm organization: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm organization: view belonged') && ($account->stormorganization_nid == $node->nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function stormorganization_access_sql($sql, $where = array(), $join = array()) {
  global $user;

  if (user_access('Storm organization: view all')) {
    return storm_rewrite_sql($sql, $where);
  }

  $cond = '';
  if (user_access('Storm organization: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Storm organization: view belonged')) {
    if ($cond) $cond .= ' OR ';
    $cond .= 'n.nid='. $user->stormorganization_nid;
  }
  if (!$cond) {
    $cond = '0=1';
  }

  if ($cond) $cond .= ' AND ';
  $cond .= " 'sor_access'='sor_access' ";

  if ($cond) $where[] = $cond;

  return storm_rewrite_sql($sql, $where);
}

function stormorganization_storm_rewrite_where_sql($query, $primary_table ='n', $account = NULL) {
  static $conds = array();

  if (!$account) {
    global $user;
    $account = $user;
  }

  if ($conds[$account->uid]) {
    return $conds[$account->uid];
  }

  if (preg_match("/'sor_access'='sor_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Storm organization: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Storm organization: view own', $account)) {
      $cond .= "${primary_table}.uid=". $account->uid;
    }
    if (user_access('Storm organization: view belonged', $account)) {
      if ($cond) $cond .= ' OR ';
      $cond .= 'sor1.nid='. $account->stormorganization_nid;
    }
    if ($cond) {
      $cond = "WHEN 'stormorganization' THEN (SELECT IF($cond,1,0) FROM {stormorganization} sor1 WHERE sor1.vid=${primary_table}.vid) ";  
    }
    else {
      $cond = "WHEN 'stormorganization' THEN 0 ";  
    }
  }

  $conds[$account->uid] = $cond;
  return $cond;
}

function stormorganization_menu() {
  $items = array();
  $items['storm/organizations'] = array(
    'title' => t('Organizations'),
    'description' => t('Storm Organizations'),
    'page callback' => 'stormorganization_list',
    'access arguments' => array('Storm organization: access'),
    'file' => 'stormorganization.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );

  $items['storm/organizations/autocomplete'] = array(
    'title' => 'Organization autocomplete',
    'page callback' => 'stormorganization_autocomplete',
    'access arguments' => array('Storm organization: access'),
    'type' => MENU_CALLBACK,
    'file' => 'stormorganization.admin.inc',
  );
  return $items;
}

function stormorganization_theme() {
  return array(
    'stormorganization_list' => array(
      'file'      => 'stormorganization.theme.inc',
      'arguments' => array('header', 'organizations'),
    ),
  );
}

function stormorganization_node_info() {
  return array(
    'stormorganization' => array(
      'name' => t('Organization'),
      'module' => 'stormorganization',
      'description' => t("An organization for Storm."),
      'title_label' => t("Name"),
      'body_label' => t("Note"),
    )
  );
}

function stormorganization_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -50,
  );

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -49,
  );

  $form['group1']['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix'),
    '#size' => 20,
    '#default_value' => $node->prefix,
  );

  $form['group1']['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Fullname'),
    '#size' => 40,
    '#default_value' => $node->fullname,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -48,
  );

  $form['group2']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => stormattribute_attributes_bydomain('Country'),
    '#default_value' => $node->country,
  );

  $form['group2']['provstate'] = array(
    '#type' => 'textfield',
    '#title' => t('Province / State'),
    '#size' => 20,
    '#default_value' => $node->provstate,
  );

  $form['group2']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 20,
    '#default_value' => $node->city,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -47,
  );

  $form['group3']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip'),
    '#size' => 15,
    '#default_value' => $node->zip,
  );

  $form['group3']['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => $node->address,
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -46,
  );

  $form['group4']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => stormattribute_attributes_bydomain('Currency'),
    '#default_value' => $node->currency,
  );

  $languages = language_list('language', TRUE);
  $languages_options = array();
  foreach ($languages as $language_code => $language) {
    $languages_options[$language_code] = $language->name;
  }
  $form['group4']['orglanguage'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => $languages_options,
    '#default_value' => $node->orglanguage,
  );

  $form['group4']['vatid'] = array(
    '#type' => 'textfield',
    '#title' => t('VAT id'),
    '#size' => 20,
    '#default_value' => $node->vatid,
  );

  $form['group5'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -45,
  );

  $form['group5']['www'] = array(
    '#type' => 'textfield',
    '#title' => t('WWW'),
    '#size' => 30,
    '#default_value' => $node->www,
  );

  $form['group5']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 30,
    '#default_value' => $node->email,
  );

  if ($type->has_body) {
    $form['body_filter']['#weight'] = -44;
    $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#required' => FALSE
    );
    $form['body_filter']['format'] = filter_form($node->format);
  }

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->title_old,
  );

  return $form;
}

function stormorganization_insert($node) {
  db_query("INSERT INTO {stormorganization}
           (vid, nid, prefix, fullname, country, www, email, currency,
           provstate, zip, city, address, vatid, orglanguage
           ) VALUES
           (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s',
           '%s', '%s', '%s', '%s', '%s', '%s'
           )",
            $node->vid, $node->nid, $node->prefix, $node->fullname, $node->country, $node->www, $node->email, $node->currency,
            $node->provstate, $node->zip, $node->city, $node->address, $node->vatid, $node->orglanguage
            );
}

function stormorganization_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    stormorganization_insert($node);
  }
  else {
    db_query("UPDATE {stormorganization} SET
              prefix = '%s', fullname = '%s', country='%s', www='%s', email='%s', currency = '%s',
              provstate = '%s', zip = '%s', city = '%s', address = '%s', vatid = '%s', orglanguage = '%s'
              WHERE vid = %d",
              $node->prefix, $node->fullname, $node->country, $node->www, $node->email, $node->currency,
              $node->provstate, $node->zip, $node->city, $node->address, $node->vatid, $node->orglanguage,
              $node->vid);
    if ($node->title != $node->title_old) {
      module_invoke_all('stormorganization_change', $node->nid, $node->title);
    }
  }
}

function stormorganization_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {stormorganization} WHERE nid = %d', $node->nid);
}

function stormorganization_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {stormorganization} WHERE vid = %d', $node->vid));
  $additions->title_old = $node->title;
  return $additions;
}

function stormorganization_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  unset($node->content['body']);

  $node->content['stormorganization_fullname'] = array(
    '#prefix' => '<div id="stormorganization_fullname">',
    '#suffix' => '</div>',
    '#value' => t('Fullname') .' : '. $node->fullname,
    '#weight' => -2,
  );

  $node->content['stormorganization_country'] = array(
    '#prefix' => '<div id="stormorganization_country">',
    '#suffix' => '</div>',
    '#value' => t('Country') .' : '. stormattribute_value('country', $node->country),
    '#weight' => -1,
  );

  $node->content['stormorganization_provstate'] = array(
    '#prefix' => '<div id="stormorganization_provstate">',
    '#suffix' => '</div>',
    '#value' => t('Province / State') .' : '. $node->provstate,
    '#weight' => 0,
  );

  $node->content['stormorganization_city'] = array(
    '#prefix' => '<div id="stormorganization_city">',
    '#suffix' => '</div>',
    '#value' => t('City') .' : '. $node->city,
    '#weight' => 1,
  );

  $node->content['stormorganization_zio'] = array(
    '#prefix' => '<div id="stormorganization_zip">',
    '#suffix' => '</div>',
    '#value' => t('Zip') .' : '. $node->zip,
    '#weight' => 1,
  );

  $node->content['stormorganization_address'] = array(
    '#prefix' => '<div id="stormorganization_address">',
    '#suffix' => '</div>',
    '#value' => t('Address') .' : '. $node->address,
    '#weight' => 2,
  );

  $node->content['stormorganization_www'] = array(
    '#prefix' => '<div id="stormorganization_www">',
    '#suffix' => '</div>',
    '#value' => t('WWW') .' : '. l($node->www, 'http://'. $node->www, array('absolute' => TRUE)),
    '#weight' => 3,
  );

  $node->content['stormorganization_email'] = array(
    '#prefix' => '<div id="stormorganization_email">',
    '#suffix' => '</div>',
    '#value' => t('Email') .' : '. l($node->email, 'mailto:'. $node->email, array('absolute' => TRUE)),
    '#weight' => 4,
  );

  $node->content['stormorganization_currency'] = array(
    '#prefix' => '<div id="stormorganization_currency">',
    '#suffix' => '</div>',
    '#value' => t('Currency') .' : '. $node->currency,
    '#weight' => 5,
  );

  $languages = language_list('language', TRUE);
  $languages_options = array();
  foreach ($languages as $language_code => $language) {
    $languages_options[$language_code] = $language->name;
  }

  $node->content['stormorganization_language'] = array(
    '#prefix' => '<div id="stormorganization_language">',
    '#suffix' => '</div>',
    '#value' => t('Language') .' : '. $languages_options[$node->orglanguage],
    '#weight' => 6,
  );

  $node->content['stormorganization_vatid'] = array(
    '#prefix' => '<div id="stormorganization_vatid">',
    '#suffix' => '</div>',
    '#value' => t('VAT id') .' : '. $node->vatid,
    '#weight' => 7,
  );

  $node->content['stormorganization_note'] = array(
    '#prefix' => '<div id="stormorganization_note">',
    '#suffix' => '</div>',
    '#value' => t('Note') .' : '. $node->body,
    '#weight' => 8,
  );

  $node->content['stormorganization_links'] = array(
    '#prefix' => '<div id="stormorganization_links">',
    '#suffix' => '</div>',
    '#weight' => 9,
  );

  if (module_exists('stormperson')) {
    $node->content['stormorganization_links']['people'] = array(
      '#prefix' => '<div id="stormorganization_people">',
      '#suffix' => '</div>',
      '#value' => l(t('People'), 'storm/people/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 0,
    );
  }

  if (module_exists('stormproject')) {
    $node->content['stormorganization_links']['projects'] = array(
      '#prefix' => '<div id="stormorganization_projects">',
      '#suffix' => '</div>',
      '#value' => l(t('Projects'), 'storm/projects/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 1,
    );
  }

  if (module_exists('stormnote')) {
    $node->content['stormorganization_links']['notes'] = array(
      '#prefix' => '<div id="stormorganization_notes">',
      '#suffix' => '</div>',
      '#value' => l(t('Notes'), 'storm/notes/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 2,
    );
  }

  if (module_exists('stormticket')) {
    $node->content['stormorganization_links']['tickets'] = array(
      '#prefix' => '<div id="stormorganization_tickets">',
      '#suffix' => '</div>',
      '#value' => l(t('Tickets'), 'storm/tickets/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 3,
    );
  }

  if (module_exists('stormtimetracking')) {
    $node->content['stormorganization_links']['timetrackings'] = array(
      '#prefix' => '<div id="stormorganization_timetrackings">',
      '#suffix' => '</div>',
      '#value' => l(t('Timetrackings'), 'storm/timetrackings/', array('query' => array('organization_nid' => $node->nid))) .'<br />',
      '#weight' => 4,
    );
  }

  return $node;
}

function stormorganization_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'storm_admin_settings') {
    $s = "SELECT n.nid, n.title FROM  {node} AS n INNER JOIN {stormorganization} AS sor ON sor.nid=n.nid WHERE n.status=1 AND n.type='stormorganization' ORDER BY n.title";
    $s = db_rewrite_sql($s);
    $r = db_query(stormorganization_access_sql($s));
    $organizations = array();
    while ($organization = db_fetch_object($r)) {
      $organizations[$organization->nid] = $organization->title;
    }
    $form['storm_organization_nid'] = array(
      '#type' => 'select',
      '#title' => t('Organization'),
      '#options' => $organizations,
      '#default_value' => variable_get('storm_organization_nid', 0),
      '#description' => t('The organization that owns this system'),
      '#weight' => -30,
    );
  }
}

