<?php
// $Id$

/**
 * @file
 */

function storminvoice_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#storminvoice":
      $o = '<p>'. t("Provides invoice support for STORM") .'</p>';
      break;
  }

  return $o;
}

function storminvoice_perm() {
  return array(
                'STORM invoice: access',
                'STORM invoice: add',
                'STORM invoice: delete all',
                'STORM invoice: delete own',
                'STORM invoice: delete of user organization',
                'STORM invoice: edit all',
                'STORM invoice: edit own',
                'STORM invoice: edit of user organization',
                'STORM invoice: view all',
                'STORM invoice: view own',
                'STORM invoice: view of user organization',
  );
}

function storminvoice_init() {
  $settings = array(
                    'storm' => array(
                      'project_invoices_url' => url('storm/project_invoices_js/')
                    ),
              );
  drupal_add_js($settings, 'setting');
  drupal_add_js(drupal_get_path('module', 'storminvoice') .'/storminvoice.js', 'module', 'header', FALSE);
}

function storminvoice_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('STORM invoice: add');
  }

  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'delete') {
    if (user_access('STORM invoice: delete all')) {
      return TRUE;
    }
    else if (user_access('STORM invoice: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM invoice: delete of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('STORM invoice: edit all')) {
      return TRUE;
    }
    else if (user_access('STORM invoice: edit own') && ($user->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM invoice: edit of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('STORM invoice: view all')) {
      return TRUE;
    }
    else if (user_access('STORM invoice: view own') && ($user->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM invoice: view of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function storminvoice_access_sql($sql, $where = array(), $join = array()) {

  if (user_access('STORM invoice: view all')) {
    return storm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('STORM invoice: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('STORM invoice: view of user organization')) {
    if ($cond) $cond .= ' OR ';
    $cond .= 'sin.organization_nid='. $user->organization_nid;
  }
  if (!$cond) {
    $cond = '0=1';
  }
  $where[] = $cond;

  return storm_rewrite_sql($sql, $where);
}

function storminvoice_menu() {
  $items = array();

  $items['storm/project_invoices_js/%/%'] = array(
    'title' => t('Tasks'),
    'page callback' => '_storminvoice_project_invoices_js',
    'page arguments' => array(2, 3),
    'access arguments' => array('STORM invoice: access'),
    'file' => 'storminvoice.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['storm/invoices'] = array(
    'title' => t('Invoices'),
    'description' => t('STORM invoices'),
    'page callback' => 'storminvoice_list',
    'access arguments' => array('STORM invoice: access'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'storminvoice.admin.inc',
  );

  $items['storm/invoice/report/%node/%/%'] = array(
            'title' => t('Invoice'),
            'page arguments' => array(3, 4, 5),
            'description' => t('STORM Invoice'),
            'page callback' => 'storminvoice_report',
            'access arguments' => array('STORM invoice: access'),
            'type' => MENU_CALLBACK,
            'file' => 'storminvoice.admin.inc',
  );

  return $items;
}

function storminvoice_theme() {
  return array(
    'storminvoice_list' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('header', 'invoices', 'itemsperpage', 'totals_topay', 'totals_paid', 'totals'),
    ),
    'storminvoice_view' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('node', 'teaser', 'page'),
    ),
    'storminvoice_report' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('node', 'report', 'language'),
    ),
  );
}

function storminvoice_node_info() {
  return array(
    'storminvoice' => array(
      'name' => t('Invoice'),
      'module' => 'storminvoice',
      'description' => t("An invoice for STORM."),
      'title_label' => t("Description"),
      'has_body' => false,
    )
  );
}

function storminvoice_storm_indexpage() {
  $o = array();
  $o['storminvoice']['title'] =  l(t('Invoices'), 'storm/invoices');
  return $o;
}

function storminvoice_stormorganization_change($organization_nid, $organization_title) {
  $s = "UPDATE {storminvoice} SET organization_title='%s' WHERE organization_nid=%d AND organization_title <> '%s'";
  db_query($s, $organization_title, $organization_nid, $organization_title);
}

function storminvoice_stormproject_change($project_nid, $project_title) {
  $s = "UPDATE {storminvoice} SET project_title='%s' WHERE project_nid=%d AND project_title <> '%s'";
  db_query($s, $project_title, $project_nid, $project_title);
}

function storminvoice_form(&$node) {
  if (arg(1)=='add') {
    $node->requestdate = time();
    $node->duedate = $node->requestdate + (variable_get('storminvoice_payment_days', 30) * 86400);
    $s = "SELECT MAX(CAST(SUBSTRING_INDEX(sin.number, '/', 1) AS SIGNED)) FROM {node} n INNER JOIN {storminvoice} sin ON n.nid=sin.nid
          WHERE n.type='storminvoice' AND YEAR(FROM_UNIXTIME(sin.requestdate))=YEAR(FROM_UNIXTIME(%d))";
    $date = getdate($node->requestdate);
    $node->number = (db_result(db_query($s, $node->requestdate)) + 1) .'/'. $date['year'];

    if (array_key_exists('organization_nid', $_GET) && !$node->organization_nid) {
      $node->organization_nid = $_GET['organization_nid'];
    }
    if (array_key_exists('project_nid', $_GET) && !$node->project_nid) {
      $node->project_nid = $_GET['project_nid'];
      $p = node_load($node->project_nid);
      $node->organization_nid = $p->organization_nid;
    }

    if ($_SESSION['storminvoice_list_filter']['organization_nid'] && !$node->organization_nid) {
      $node->organization_nid = $_SESSION['storminvoice_list_filter']['organization_nid'];
    }
    if ($_SESSION['storminvoice_list_filter']['project_nid'] && !$node->project_nid) {
      $node->project_nid = $_SESSION['storminvoice_list_filter']['project_nid'];
    }
  }

  $type = node_get_types('type', $node);

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -50,
  );

  $form['group1']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number'),
    '#required' => TRUE,
    '#size' => 10,
    '#default_value' => $node->number,
  );

  $form['group1']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -48,
  );

  $s = "SELECT n.nid, n.title FROM {stormorganization} sor INNER JOIN {node} n ON sor.nid=n.nid WHERE n.status=1 AND n.type='stormorganization' ORDER BY n.title";
  $r = db_query(stormorganization_access_sql($s));
  $organizations = array();
  while ($organization = db_fetch_object($r)) {
    $organizations[$organization->nid] = $organization->title;
    if (!$node->organization_nid) $node->organization_nid = $organization->nid;
  }
  $form['group2']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => t('Organization'),
    '#default_value' => $node->organization_nid,
    '#options' => $organizations,
    '#attributes' => array('onchange' => "stormproject_organization_projects(this, 'edit-project-nid', true, '-')"),
  );

  $s = "SELECT n.nid, n.title FROM {stormproject} spr INNER JOIN {node} n ON spr.nid=n.nid WHERE spr.organization_nid=%d AND n.status=1 AND n.type='stormproject' ORDER BY n.title";
  $r = db_query(stormproject_access_sql($s), $node->organization_nid);
  $projects = array();
  while ($project = db_fetch_object($r)) {
    $projects[$project->nid] = $project->title;
  }
  $projects = array(0 => '-') + $projects;
  $form['group2']['project_nid'] = array(
    '#type' => 'select',
    '#title' => t('Project'),
    '#default_value' => $node->project_nid,
    '#options' => $projects,
    '#process' => array('storm_dependent_select_process'),
  );

  $form['group2']['reference'] = array(
    '#type' => 'textfield',
    '#title' => t('Reference'),
    '#default_value' => $node->reference,
    '#size' => 40,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -47,
  );

  $form['group3']['requestdate'] = array(
    '#type' => 'date',
    '#withnull' => 'true',
    '#title' => t('Request date'),
    '#default_value' => _storm_gmtimestamp_to_date($node->requestdate),
  );

  $form['group3']['duedate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => t('Due date'),
    '#default_value' => _storm_gmtimestamp_to_date($node->duedate),
  );

  $form['group3']['paymentdate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => t('Payment date'),
    '#default_value' => _storm_gmtimestamp_to_date($node->paymentdate),
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -46,
  );

  $form['group4']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#attributes' => array('readonly' => 'readonly'),
    '#size' => 15,
    '#default_value' => $node->amount,
  );

  $form['group4']['vat'] = array(
    '#type' => 'textfield',
    '#title' => t('VAT'),
    '#attributes' => array('readonly' => 'readonly'),
    '#size' => 15,
    '#default_value' => $node->vat,
  );

  $form['group4']['total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total'),
    '#attributes' => array('readonly' => 'readonly'),
    '#size' => 15,
    '#default_value' => $node->total,
  );

  $form['group4']['totalcustomercurr'] = array(
    '#type' => 'textfield',
    '#title' => t('Total in customer currency'),
    '#size' => 15,
    '#default_value' => $node->totalcustomercurr,
  );

  $form['vatexempt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Vat exempt'),
    '#weight' => -45,
    '#default_value' => $node->vatexempt,
  );

  return $form;
}

function storminvoice_insert($node) {
  _storminvoice_beforesave($node);

  db_query("INSERT INTO {storminvoice}
           (vid, nid,
           number, reference,
           organization_nid, organization_title,
           project_nid, project_title,
           amount, vat, total, totalcustomercurr,
           requestdate, duedate, paymentdate, vatexempt) VALUES
           (%d, %d,
           '%s', '%s',
           %d, '%s',
           %d, '%s',
           %f, %f, %f, %f,
           %d, %d, %d, %d)",
          $node->vid, $node->nid,
          $node->number, $node->reference,
          $node->organization_nid, $node->organization_title,
          $node->project_nid, $node->project_title,
          $node->amount, $node->vat, $node->total, $node->totalcustomercurr,
          $node->requestdate, $node->duedate, $node->paymentdate, $node->vatexempt);
}

function storminvoice_update($node) {
  _storminvoice_beforesave($node);

  db_query("UPDATE {storminvoice} SET
            number='%s', reference='%s',
            organization_nid=%d, organization_title='%s',
            project_nid=%d, project_title='%s',
            amount=%f, vat=%f, total=%f, totalcustomercurr=%f,
            requestdate=%d, duedate=%d, paymentdate=%d, vatexempt=%d WHERE vid = %d",
            $node->number, $node->reference,
            $node->organization_nid, $node->organization_title,
            $node->project_nid, $node->project_title,
            $node->amount, $node->vat, $node->total, $node->totalcustomercurr,
            $node->requestdate, $node->duedate, $node->paymentdate, $node->vatexempt, $node->vid);
}

function _storminvoice_beforesave(&$node) {
  $node->requestdate = _storm_date_to_gmtimestamp($node->requestdate);
  $node->duedate = _storm_date_to_gmtimestamp($node->duedate);
  $node->paymentdate = _storm_date_to_gmtimestamp($node->paymentdate);

  $s = "SELECT n.title
        FROM {node} n INNER JOIN {stormorganization} o ON n.nid=o.nid
        WHERE type='stormorganization' AND n.nid=%d";
  $r = db_query($s, $node->organization_nid);
  $o = db_fetch_object($r);
  $node->organization_title = $o->title;

  $s = "SELECT n.title
        FROM {node} n INNER JOIN {stormproject} p ON n.nid=p.nid
        WHERE type='stormproject' AND n.nid=%d";
  $r = db_query($s, $node->project_nid);
  $p = db_fetch_object($r);
  $node->project_title = $p->title;

  if (!$node->totalcustomercurr) {
    $node->totalcustomercurr = $node->total;
  }
}

function storminvoice_delete($node) {
  db_query('DELETE FROM {storminvoice} WHERE nid = %d', $node->nid);
}

function storminvoice_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {storminvoice} WHERE vid = %d', $node->vid));
  return $additions;
}

function storminvoice_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['storminvoice'] = array(
    '#value' => theme('storminvoice_view', $node, $teaser = FALSE, $page = FALSE),
    '#weight' => 1,
  );

  return $node;
}

function storminvoice_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'storm_admin_settings') {
    $form['storminvoice_payment_days'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of days for invoice payment'),
      '#default_value' => variable_get('storminvoice_payment_days', 30),
      '#description' => t('Default number of days for invoice payment'),
      '#size' => 5,
      '#weight' => -10,
    );
    $form['storminvoice_payment_modes'] = array(
      '#type' => 'textarea',
      '#title' => t('Modes for invoice payment'),
      '#default_value' => variable_get('storminvoice_payment_modes', ''),
      '#description' => t('Modes for invoice payment'),
      '#weight' => -9,
    );
    $form['storminvoice_payment_terms'] = array(
      '#type' => 'textfield',
      '#title' => t('Payment terms'),
      '#default_value' => variable_get('storminvoice_payment_terms', 'Due on receipt'),
      '#description' => t('Payment terms'),
      '#size' => 50,
      '#weight' => -8,
    );
  }
}

