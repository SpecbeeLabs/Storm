<?php
// $Id$

/**
 * @file
 */

function storminvoiceitem_help($path, $arg) {
  $o = '';

  switch ($section) {
    case "admin/help#storminvoiceitem":
      $o = '<p>'. t("Provides invoice item support for STORM") .'</p>';
      break;
  }

  return $o;
}

function storminvoiceitem_perm() {
  return array(
    'STORM invoice item: access',
    'STORM invoice item: add',
    'STORM invoice item: delete all',
    'STORM invoice item: delete own',
    'STORM invoice item: delete of user organization',
    'STORM invoice item: edit all',
    'STORM invoice item: edit own',
    'STORM invoice item: edit of user organization',
    'STORM invoice item: view all',
    'STORM invoice item: view own',
    'STORM invoice item: view of user organization',
  );
}

function storminvoiceitem_init() {
  $settings = array(
                    'storm' => array(
                      'project_tasks_url' => url('storm/project_tasks_js/')
                    ),
              );
  drupal_add_js($settings, 'setting');
  drupal_add_js(drupal_get_path('module', 'storminvoiceitem') .'/storminvoiceitem.js', 'module', 'header', FALSE);
}

function storminvoiceitem_access($op, $node, $account) {
  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'create') {
    return user_access('STORM invoice item: add');
  }

  if ($op == 'delete') {
    if (user_access('STORM invoice item: delete all')) {
      return TRUE;
    }
    else if (user_access('STORM invoice item: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM invoice item: delete of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('STORM invoice item: edit all')) {
      return TRUE;
    }
    else if (user_access('STORM invoice item: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM invoice item: edit of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('STORM invoice item: view all')) {
      return TRUE;
    }
    else if (user_access('STORM invoice item: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('STORM invoice item: view of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function storminvoiceitem_access_sql($sql, $where = array(), $join = array()) {
  if (user_access('STORM invoice item: view all')) {
    return storm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('STORM invoice item: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('STORM invoice item: view of user organization')) {
    if ($cond) $cond .= ' OR ';
    $cond .= 'sin.organization_nid='. $user->stormorganization_nid;
  }
  if (!$cond) {
    $cond = '0=1';
  }
  $where[] = $cond;

  return storm_rewrite_sql($sql, $where);
}

function storminvoiceitem_menu() {
  $items['node/%node/invoiceitems'] = array(
    'title' => t('Invoice items'),
    'page callback' => 'storminvoiceitem_invoiceitems',
    'page arguments' => array(1),
    'access callback' => '_storminvoiceitem_invoiceitems_access',
    'access arguments' => array(1),
    'file' => 'storminvoiceitem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );
  return $items;
}

function storminvoiceitem_theme() {
  return array(
    'storminvoiceitem_invoiceitems' => array(
      'file'      => 'storminvoiceitem.theme.inc',
      'arguments' => array('header', 'invoiceitems'),
    ),
  );
}

function storminvoiceitem_node_info() {
  return array(
    'storminvoiceitem' => array(
      'name' => t('Invoice item'),
      'module' => 'storminvoiceitem',
      'description' => t("An invoice item for STORM."),
      'title_label' => t("Description"),
      'has_body' => false,
    )
  );
}

function storminvoiceitem_form(&$node) {
  if (arg(1)=='add') {
    if (array_key_exists('invoice_nid', $_GET) && !$node->invoice_nid) {
      $node->invoice_nid = $_GET['invoice_nid'];
    }
    else {
      drupal_set_message(t("It's impossible to create an item without an invoice. You need to select an invoice before."));
      drupal_goto('storm/invoices');
    }
  }

  $type = node_get_types('type', $node);

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -50,
  );

  $form['group1']['invoice_nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->invoice_nid,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -48,
  );

  $form['group2']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#size' => 80,
  );

  $form['group2']['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $node->weight,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -48,
  );

  $form['group3']['amount'] = array(
    '#type' => 'textfield',
    '#withnull' => 'true',
    '#title' => t('Amount'),
    '#size' => 15,
    '#default_value' => $node->amount,
  );

  $form['group3']['vatpercent'] = array(
    '#type' => 'textfield',
    '#withnull' => 'true',
    '#title' => t('VAT percent'),
    '#size' => 15,
    '#default_value' => $node->vatpercent,
  );

  $form['group3']['vat'] = array(
    '#type' => 'textfield',
    '#withnull' => 'true',
    '#title' => t('VAT'),
    '#size' => 15,
    '#default_value' => $node->vat,
  );

  $form['group3']['total'] = array(
    '#type' => 'textfield',
    '#withnull' => 'true',
    '#title' => t('Total'),
    '#size' => 15,
    '#default_value' => $node->total,
  );

  return $form;
}

function storminvoiceitem_insert($node) {
  _storminvoiceitem_beforesave($node);

  db_query("INSERT INTO {storminvoiceitem}
           (vid, nid,
           invoice_nid,
           amount, vatpercent, vat, total,
           weight) VALUES
           (%d, %d,
           %d,
           %f, %f, %f, %f,
           %d)",
          $node->vid, $node->nid,
          $node->invoice_nid,
          $node->amount, $node->vatpercent, $node->vat, $node->total,
          $node->weight);
  _storminvoiceitem_aftersave($node);
}

function storminvoiceitem_update($node) {
  _storminvoiceitem_beforesave($node);

  db_query("UPDATE {storminvoiceitem} SET
            invoice_nid=%d,
            amount=%f, vatpercent=%f, vat=%f, total=%f,
            weight=%d
            WHERE vid = %d",
            $node->invoice_nid,
            $node->amount, $node->vatpercent, $node->vat, $node->total,
            $node->weight, $node->vid);
  _storminvoiceitem_aftersave($node);
}

function _storminvoiceitem_beforesave(&$node) {
  if (!$node->vat) {
    $node->vat = $node->amount * $node->vatpercent * .01;
  }
  if (!$node->total) {
    $node->total = $node->amount + $node->vat;
  }
}

function _storminvoiceitem_aftersave(&$node) {
  $s = "SELECT SUM(amount) tamount, SUM(vat) tvat, SUM(total) ttotal FROM {storminvoiceitem} WHERE invoice_nid=%d";
  $r = db_query($s, $node->invoice_nid);
  $t = db_fetch_object($r);

  $invoice = node_load($node->invoice_nid);
  $invoice->amount = $t->tamount;
  $invoice->vat = $t->tvat;
  $invoice->total = $t->ttotal;
  storminvoice_update($invoice);
}

function storminvoiceitem_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {storminvoiceitem} WHERE nid = %d', $node->nid);
  _storminvoiceitem_aftersave($node);
}

function storminvoiceitem_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {storminvoiceitem} WHERE vid = %d', $node->vid));
  $additions->stepno_old = $node->stepno;
  $additions->title_old = $node->title;
  return $additions;
}

function storminvoiceitem_validate(&$node) {
  if (($node->nid == $node->parent_nid) && $node->parent_nid) {
    form_set_error('parent_nid', t('Impossible to assign itself as parent.'));
  }
}

function storminvoiceitem_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $project = node_load($node->project_nid);
  $node->content['project'] = array(
    '#value' => t('Project') .' : '. l($project->title, 'node/'. $project->nid) .'<br />',
    '#weight' => 1,
  );
  return $node;
}

function _storminvoiceitem_invoiceitems_access($node=NULL) {
  if ($node == NULL) return FALSE;
  if ($node->type == 'storminvoice' && user_access('STORM invoice item: access')) return TRUE;
  return FALSE;
}

function storminvoiceitem_getitems($invoice_nid) {
  $r = db_query("SELECT n.*, sit.* FROM {node} n INNER JOIN {storminvoiceitem} sit ON n.nid=sit.nid WHERE
  n.status=1 AND n.type='storminvoiceitem' AND sit.invoice_nid = %d", $invoice_nid);
  $items = array();
  while ($i = db_fetch_object($r)) {
    $items[] = $i;
  }
  return $items;
}
